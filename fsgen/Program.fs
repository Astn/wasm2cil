
open System
open System.IO
open System.Text
open System.Collections.Generic

open fsgen.opcodes

type Immediate =
    | I32
    | U32
    | Nothing

let get_immediate name =
    // TODO magic strings here are sad
    match name with
    | "I32Const" -> I32
    | "Call" -> U32
    | "Br" -> U32
    | "BrIf" -> U32
    | "LocalGet" -> U32
    | "LocalSet" -> U32
    | _ -> Nothing

let get_prefixes () =
    let h = HashSet<int>()
    for op in opcode_infos do
        match op.prefix with
        | Some p -> h.Add(p) |> ignore
        | None -> ()
    h

let write_type_instruction path =
    let sb = StringBuilder()
    let pr (s: string) =
        sb.Append(s + "\n") |> ignore
    "// this file is automatically generated" |> pr
    "module wasm.instr" |> pr
    "    type Instruction =" |> pr
    for op in opcode_infos do
        match get_immediate op.name with
        | I32 -> sprintf "        | %s of int32"  op.name |> pr
        | U32 -> sprintf "        | %s of uint32"  op.name |> pr
        | Nothing -> sprintf "        | %s"  op.name |> pr
    "\n" |> pr
    let txt = sb.ToString()
    File.WriteAllText(path, txt)
    
let write_function_read_instruction path =
    let prefixes = get_prefixes()

    let sb = StringBuilder()
    let pr (s: string) =
        sb.Append(s + "\n") |> ignore
    "// this file is automatically generated" |> pr
    "module wasm.parse" |> pr
    "    open wasm.buffer" |> pr
    "    open wasm.instr" |> pr

    pr "    let read_instruction (br: BinaryWasmStream) ="
    pr "        let b1 = br.ReadByte()"
    pr "        match b1 with"
    for n in prefixes do
        sprintf "        | 0x%02xuy ->" n |> pr
        sprintf "            let b2 = br.ReadByte()" |> pr
        sprintf "            match b2 with" |> pr
        for op in opcode_infos do
            match op.prefix with
            | Some x -> 
                if x = n then
                    sprintf "            | 0x%02xuy -> %s" op.code op.name |> pr
            | None -> ()
        sprintf "            | _      -> failwith \"todo\"" |> pr

    for op in opcode_infos do
        match op.prefix with
        | Some _ -> ()
        | None -> 
            match get_immediate op.name with
            | I32 -> sprintf "        | 0x%02xuy -> %s (br.ReadVarInt32())" op.code op.name |> pr
            | U32 -> sprintf "        | 0x%02xuy -> %s (br.ReadVarUInt32())" op.code op.name |> pr
            | Nothing -> sprintf "        | 0x%02xuy -> %s" op.code op.name |> pr
    sprintf "        | _      -> failwith \"todo\"" |> pr
    sprintf "" |> pr

    let txt = sb.ToString()
    File.WriteAllText(path, txt)
    
[<EntryPoint>]
let main argv =
    let dir_top =
        let cwd = Directory.GetCurrentDirectory()
        Path.GetFullPath(Path.Combine(cwd, ".."))
        // TODO or maybe walk upward until we find the right directory

    let dir_wasm = Path.Combine(dir_top, "wasm")
    write_type_instruction (Path.Combine(dir_wasm, "Instruction.fs"))
    write_function_read_instruction (Path.Combine(dir_wasm, "ReadInstruction.fs"))

    0 // return an integer exit code

