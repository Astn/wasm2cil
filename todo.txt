
ouch.  results vary from run to run, even without
a rebuild.

dump first arg to R, it's wrong
it comes from a simple call to G with constants

weird: compile to wasm with different O settings
    O3 -- ppm file correct size, all pixels white
    O2 -- same
    O1 -- exp2() call unresolved, fix, then ppm file wrong size
       -- compiles, but ppm file wrong size

are promote and demote actually working?

why is atan2 always getting NaNs ?

test min and max?

xunit theory instead of fact

sqlite docs say the OMIT defines don't work for the
amalgamation

sqlite compile needs i64ctlz

some combinations of compare/BrIf could probably
be merged into CIL like Beq.  like a peephole
optimization.

stack cleanup around br and friends.  write failing
test cases for this.

things that are tricky could be implemented in C# in env
and just import and call out to it.  but long term,
it might be better to require env only for cases where
something was imported.  a module that imports nothing
should ideally result in an assembly that has no
dependencies.

need more tests of invalid wasm

it would be nice to throw even more specific exceptions
so the tests can be more precise in error cases

memory load/store operations are supposed to be
range-checked

should use the short form of more CIL instructions,
like Ldloc

only one copy of memory, shared by all the tests?
most tests need a private memory, not ref the
imported one in env.  but can we reference an
internal memory from a test?

consider possibility of just using int everywhere
a uint32 is used, because that's just how .NET
does things, with array indexes and such being
int instead of unsigned

--

want to eventually package this as a dotnet global tool

maybe we need a func to emit an expression for init cases, 
more limited

not sure how imported table makes sense

need some tests to verify read/write of the binary
format

--

consider using the actual wasm opcode name
for the union labels, with `` ?

might like the ability to output a wasm module
as F# to reconstruct it with Builder

consistency question about the final End opcode

--

hmmm.  consider system.reflection.metadata
instead of Cecil ?

--

how to make clang not generate refs to soft fp functions?

how to deal with non-mut globals?

consider an F# wrapper around cecil, avoid all those
il.Create() overloads, so problems can be caught at
compile time instead of run time.

still some problems in roundtripping binary format,
might be important, not sure

need consistency about whether to pass around
wrapped indexes or just the ints

consider using checked int operations in leb128 code

best practice for formatting fs, type annotations, colon

def and read and write and cecil could be in separate assemblies?

review naming of def record fields.  compare to spec.
and conventions, lower case, etc.

