
wasi layer is not doing path resolution correctly.
for example, in remove_directory, the fd param
is not used, even though it is supposed to be the
directory at which path resolution starts.

technically, an fd is documented as a uint.  but
wasm doesn't really distinguish between i32 and u32
that much, so the lookups will actually fail if
we declare, for example, set_flags() with the second
param as ushort.

ha.  several of the problems with the sqlite shell
are working exactly as they do when compiled
directly to native.  so those problems appear to
be limitations of the demo VFS rather than bugs
in this compiler or WASI layer.

sqlite shell tries to open :memory: as if it is
a filename.  and windows doesn't like a filename
with a colon in it.  where to stop this from happening?

need tests for the Wasm binary reader.  probably with
sample files that came from other sources, like clang.

need tests for the WASI layer

ouch.  the code that gets the preopened fds is
called only from the startup code, and since 
the sqlite lib build doesn't generate an entry 
point, that never happens, so the open call dies 
because the po map is not valid.

    call $__wasilibc_init_preopen
    call $__wasilibc_register_preopened_fd

    /wasi-sysroot/libc-bottom-half/headers/public/wasi/

are strings in the wasi api supposed to be zero
terminated?  case by case?

for debugging, maybe we need the sysroot to be built
with --export-all

how does wasm represent a null pointer?  if everything
is an integer address offset from the base of memory.

failing 204 because wasi sysroot has formatting of long
double disabled

need some rust test cases

--

explicitly add /usr/lib/llvm-8/bin to the path

--export-all instead of --export=main makes tracing
easier because the functions have visible names

sqlite3 demo vfs is weak.  it doesn't even have locking.
need to use the regular vfs, but without pthreads.
and mmap.

env_testing doesn't have the clz/ctz hacks

proper impl of clz and ctx

does cctor init of globals/data respect mem size?

initial mem size does make a difference in the
behavior of 00056.  default to a higher value?
respect the definition in the wasm file?

--

instead of calling Marshal.Copy, use Cpblk

get another wasm runtime going for comparison
purposes.  wasmer.  doesn't seem to run stuff
from clang 8.  can't tell if wasm is wrong or
wasmer has problems.  lucet?

peverify shows lots of problems

f64/i64 reinterp causes peverify type problems?
bitconverter.

tests for bit shifts?

why do shifts get [found Long][expected Native Int]

need test for GrowMemory

--

currently, the memory section of the module is ignored.
if there is no memory import, one is defined, whether
the module had a memory section or not.  do we need 
a way to specify a module which has no memory at all?

should probably lookup all references in a ns2.0 reference
assembly

do we need a way to use System.Math instead of the math
routines in wasi sysroot?

consider --import-memory, but currently when we target
WASI we just ignore memory import anyway

--

test min and max?

xunit theory instead of fact

some combinations of compare/BrIf could probably
be merged into CIL like Beq.  like a peephole
optimization.

stack cleanup around br and friends.  write failing
test cases for this.

things that are tricky could be implemented in C# in env
and just import and call out to it.  but long term,
it might be better to require env only for cases where
something was imported.  a module that imports nothing
should ideally result in an assembly that has no
dependencies.

need more tests of invalid wasm

it would be nice to throw even more specific exceptions
so the tests can be more precise in error cases

memory load/store operations are supposed to be
range-checked

should use the short form of more CIL instructions,
like Ldloc

consider possibility of just using int everywhere
a uint32 is used, because that's just how .NET
does things, with array indexes and such being
int instead of unsigned

--

want to eventually package this as a dotnet global tool

maybe we need a func to emit an expression for init cases, 
more limited

not sure how imported table makes sense

need some tests to verify read/write of the binary
format

--

hmmm.  consider system.reflection.metadata
instead of Cecil ?

--

how to deal with non-mut globals?

consider an F# wrapper around cecil, avoid all those
il.Create() overloads, so problems can be caught at
compile time instead of run time.

still some problems in roundtripping binary format,
might be important, not sure.  update:  did this get
fixed with the leb128 decode signed fix?

need consistency about whether to pass around
wrapped indexes or just the ints

consider using checked int operations in leb128 code

best practice for formatting fs, type annotations, colon

def and read and write and cecil could be in separate assemblies?

review naming of def record fields.  compare to spec.
and conventions, lower case, etc.

chg assembly write to use a stream ?

