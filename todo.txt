
validation:  at the end of a function, the stack
should contain only the return value, if any

should use the short form of CIL instructions like
Ldc_I4 0

only one copy of memory, shared by all the tests?
most tests need a private memory, not ref the
imported one in env.  but can we reference it
from a test?

things that are tricky could be implemented in C# in env
and just import and call out to it

consider possibility of just using int everywhere
a uint32 is used, because that's just how .NET
does things, with array indexes and such being
int instead of unsigned

better error messages for imports not found

--

if a memory is imported, who is supposed to allocate it?
we can probably make an arbitrary choice here since we
control env as well.  and there is decent reason to
have memory be in env so that other functions in env
can reference it.

maybe we need a func to emit an expression for init cases, 
more limited

not sure how imported table makes sense

need some tests to verify read/write of the binary
format

stack cleanup around br and friends

--

consider using the actual wasm opcode name
for the union labels, with ``

https://github.com/SteveGilham/altcover

might like the ability to output a wasm module
as F# to reconstruct it with Builder

consistency question about the final End opcode

--

hmmm.  consider system.reflection.metadata?

--

how to make clang not generate refs to soft fp functions?

why doesn't clang mark exports ?

how to deal with non-mut globals?

consider an F# wrapper around cecil, avoid all those
il.Create() overloads

still some problems in roundtripping binary format,
might be important, not sure

need consistency about whether to pass around
wrapped indexes or just the ints

consider using checked int operations in leb128 code

best practice for formatting fs, type annotations, colon

def and read and write and cecil could be in separate assemblies?

review naming of def record fields.  compare to spec.
and conventions, lower case, etc.

