
env_testing doesn't have the clz/ctz hacks

proper impl of clz and ctx

the read wasm binary format routines, including the
leb128 stuff, gets much less testing, as the xunit
cases don't test them

range checking on all mem operations would help
catch problems earlier

does cctor init of globals/data respect mem size?

initial mem size does make a difference in the
behavior of 00056.  default to a higher value?
respect the definition in the wasm file?

what should call fflush stdout?  return from main
is supposed to call exit, and exit is supposed
to flush all stream buffers.  but since clang is
wrapping main as original main, shouldn't it
do the exit call?

any chance exceptions from wasi methods are
getting swallowed?

instead of calling Marshal.Copy, use Cpblk

get another wasm runtime going for comparison
purposes.  wasmer.  doesn't seem to run stuff
from clang 8.  can't tell if wasm is wrong or
wasmer has problems.

peverify shows lots of problems

f64/i64 reinterp causes peverify type problems?
bitconverter.

tests for bit shifts?

why do shifts get [found Long][expected Native Int]

need test for GrowMemory

about half the time, sqlite3/to_wasm.sh hangs
-Wl,--no-threads

--

currently, the memory section of the module is ignored.
if there is no memory import, one is defined, whether
the module had a memory section or not.  do we need 
a way to specify a module which has no memory at all?

should probably lookup all references in a ns2.0 reference
assembly

what else is in wasi sysroot?  math stuff like pow() ?
is it a problem if those funcs get used instead of the
ones in System.Math?

consider --import-memory, but currently when we target
Wasi we just ignore memory import anyway

--

test min and max?

xunit theory instead of fact

some combinations of compare/BrIf could probably
be merged into CIL like Beq.  like a peephole
optimization.

stack cleanup around br and friends.  write failing
test cases for this.

things that are tricky could be implemented in C# in env
and just import and call out to it.  but long term,
it might be better to require env only for cases where
something was imported.  a module that imports nothing
should ideally result in an assembly that has no
dependencies.

need more tests of invalid wasm

it would be nice to throw even more specific exceptions
so the tests can be more precise in error cases

memory load/store operations are supposed to be
range-checked

should use the short form of more CIL instructions,
like Ldloc

consider possibility of just using int everywhere
a uint32 is used, because that's just how .NET
does things, with array indexes and such being
int instead of unsigned

--

want to eventually package this as a dotnet global tool

maybe we need a func to emit an expression for init cases, 
more limited

not sure how imported table makes sense

need some tests to verify read/write of the binary
format

--

might like the ability to output a wasm module
as F# to reconstruct it with Builder

consistency question about the final End opcode

--

hmmm.  consider system.reflection.metadata
instead of Cecil ?

--

how to deal with non-mut globals?

consider an F# wrapper around cecil, avoid all those
il.Create() overloads, so problems can be caught at
compile time instead of run time.

still some problems in roundtripping binary format,
might be important, not sure

need consistency about whether to pass around
wrapped indexes or just the ints

consider using checked int operations in leb128 code

best practice for formatting fs, type annotations, colon

def and read and write and cecil could be in separate assemblies?

review naming of def record fields.  compare to spec.
and conventions, lower case, etc.

chg assembly write to use a stream ?

